
# test_SolarCollector.py - Generated by CodiumAI

import pytest

"""
Code Analysis:
- The SolarCollector class is designed to simulate the behavior of a solar panel that captures solar energy and converts it into thermal energy to heat water.
- The class has several private fields, including the surface area of the panel, the temperature of the water going in and out of the panel, the flow rate of the water, the energy captured by the panel, and the efficiency of the panel in converting solar energy to thermal energy.
- The class has a constructor that takes a configuration object as input and initializes the surface area and efficiency of the panel based on the configuration.
- The class has a method called add_one_hour_solar_energy that takes in the DNI value (a measure of solar energy hitting the panel), the flow rate of the water, and the temperature of the water going into the panel. This method calculates the amount of energy added to the water based on the DNI value, the efficiency of the panel, and the flow rate of the water. It then calculates the temperature increase of the water based on the energy added and the specific heat capacity of water. Finally, it updates the temperature of the water going in and out of the panel, the energy captured by the panel, and the flow rate of the water, and returns the temperature of the water going out of the panel.
- The class has a method called get_loggable_metrics that returns a dictionary of metrics that can be logged, including the temperature of the water going in and out of the panel, the energy captured by the panel, and the efficiency of the panel.
- The class has two special methods, __hash__ and __eq__, that allow instances of the class to be used as keys in a dictionary.
"""

"""
Test Plan:
- test_constructor_with_valid_config(): tests that the constructor initializes the object with valid config. Tags: [happy path]
- test_add_one_hour_solar_energy_with_valid_inputs(): tests that add_one_hour_solar_energy method works with valid inputs. Tags: [happy path]
- test_constructor_with_invalid_config(): tests that the constructor raises KeyError with invalid config. Tags: [edge case]
- test_add_one_hour_solar_energy_with_DNI_value_over_period_zero(): tests that add_one_hour_solar_energy method works when DNI_value_over_period is zero. Tags: [edge case]
- test_different_SPECIFIC_HEAT_CAPACITY_OF_WATER_values(): tests that the class works with different SPECIFIC_HEAT_CAPACITY_OF_WATER values. Tags: [general behavior]
- test_get_loggable_metrics(): tests that get_loggable_metrics method returns the expected dictionary. Tags: [happy path]
- test_different_solar_efficiency_values(): tests that the class works with different solar_efficiency values. Tags: [general behavior]
- test_add_one_hour_solar_energy_with_flow_rate_zero(): tests that add_one_hour_solar_energy method works when flow_rate is zero. Tags: [edge case]
- test_add_one_hour_solar_energy_with_water_temp_in_none(): tests that add_one_hour_solar_energy method works when water_temp_in is None. Tags: [edge case]
"""

# noinspection PyUnresolvedReferences
from simulationObjects.SimulatedWorld import SolarCollector


class TestSolarCollector:
    def test_constructor_with_valid_config(self):
        config = {"length": 2, "width": 3, "solar_efficiency": 0.05}
        collector = SolarCollector(config)
        assert collector._surface_area == 6
        assert collector._solar_efficiency == 0.05

    def test_add_one_hour_solar_energy_with_valid_inputs(self):
        config = {"length": 2, "width": 3, "solar_efficiency": 0.05}
        collector = SolarCollector(config)
        temp_out = collector.add_one_hour_solar_energy(1000, 5, 20)
        assert temp_out == pytest.approx(20.86, rel=1e-2)
        assert collector._water_flow_rate == 5
        assert collector._energy_captured_by_solar > 0

    def test_constructor_with_invalid_config(self):
        config = {"length": 2, "solar_efficiency": 0.05}
        with pytest.raises(KeyError):
            SolarCollector(config)

    def test_add_one_hour_solar_energy_with_DNI_value_over_period_zero(self):
        config = {"length": 2, "width": 3, "solar_efficiency": 0.05}
        collector = SolarCollector(config)
        temp_out = collector.add_one_hour_solar_energy(0, 5, 20)
        assert temp_out == pytest.approx(20, rel=1e-2)
        assert collector._water_flow_rate == 5
        assert collector._energy_captured_by_solar == 0

    def test_different_SPECIFIC_HEAT_CAPACITY_OF_WATER_values(self):
        config = {"length": 2, "width": 3, "solar_efficiency": 0.05}
        collector = SolarCollector(config)
        SPECIFIC_HEAT_CAPACITY_OF_WATER = 4186
        temp_out = collector.add_one_hour_solar_energy(1000, 5, 20)
        num_degrees_celsius_temp_water_raised = \
            (collector._energy_captured_by_solar / (collector._water_flow_rate * 60)) / SPECIFIC_HEAT_CAPACITY_OF_WATER
        assert temp_out == pytest.approx(20 + num_degrees_celsius_temp_water_raised, rel=1e-2)

    def test_get_loggable_metrics(self):
        config = {"length": 2, "width": 3, "solar_efficiency": 0.05}
        collector = SolarCollector(config)
        collector.add_one_hour_solar_energy(1000, 5, 20)
        metrics = collector.get_loggable_metrics()
        assert metrics["water_temp_into_solar"] == 20
        assert metrics["water_temp_out_of_solar"] == pytest.approx(20.86, rel=1e-2)
        assert metrics["energy_captured_by_solar"] > 0
        assert metrics["solar_efficiency"] == 0.05

