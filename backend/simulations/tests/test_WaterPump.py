
# test_WaterPump.py - Generated by CodiumAI

import pytest

"""
Code Analysis:
- The WaterPump class is designed to control the flow rate of water in a solar water heating system.
- It has several private fields that store information about the minimum and maximum flow rates, the current flow rate, and the temperature difference between incoming and outgoing water.
- The class has an __init__ method that takes a configuration dictionary as input and sets the private fields accordingly.
- The get_flow_rate method returns the current flow rate of the pump.
- The adjust_flow_to_current_state method adjusts the flow rate of the pump based on the temperature difference between incoming and outgoing water. If the temperature difference is too low, the pump slows down. If the temperature difference is too high, the pump speeds up. If the temperature difference is within an acceptable range, the pump remains at the same flow rate.
- The get_loggable_metrics method returns a dictionary of metrics that can be logged, including the current flow rate and the percentage of maximum flow rate used.
- The __hash__ and __eq__ methods are implemented so that instances of the WaterPump class can be used as keys in a dictionary.
- Overall, the WaterPump class provides a simple way to control the flow rate of water in a solar water heating system based on the temperature difference between incoming and outgoing water.
"""

"""
Test Plan:
- test_constructor_with_valid_config(): tests that the constructor initializes the WaterPump object with valid config. Tags: [happy path]
- test_get_flow_rate(): tests that get_flow_rate returns the current flow rate. Tags: [happy path]
- test_constructor_with_invalid_config(): tests that the constructor raises a KeyError when passed an invalid config. Tags: [edge case]
- test_adjust_flow_to_current_state_with_min_temp_difference(): tests that adjust_flow_to_current_state does not change the flow rate when the temperature difference is equal to the minimum temperature difference. Tags: [edge case]
- test_adjust_flow_to_current_state_general_behavior(): tests the general behavior of adjust_flow_to_current_state. Tags: [general behavior]
- test_adjust_flow_to_current_state_with_low_temp_difference(): tests that adjust_flow_to_current_state decreases the flow rate when the temperature difference is too low. Tags: [happy path]
- test_adjust_flow_to_current_state_with_high_temp_difference(): tests that adjust_flow_to_current_state increases the flow rate when the temperature difference is too high. Tags: [happy path]
- test_adjust_flow_to_current_state_with_valid_temp_difference(): tests that adjust_flow_to_current_state does not change the flow rate when the temperature difference is within the valid range. Tags: [happy path]
- test_get_loggable_metrics(): tests that get_loggable_metrics returns a dictionary of metrics. Tags: [happy path]
- test_instance_as_dict_key(): tests that instances of WaterPump can be used as keys in a dictionary. Tags: [happy path]
- test_adjust_flow_to_current_state_with_max_temp_difference(): tests that adjust_flow_to_current_state does not change the flow rate when the temperature difference is equal to the maximum temperature difference. Tags: [edge case]
"""


# noinspection PyUnresolvedReferences
from simulationObjects.WaterPump import WaterPump
class TestWaterPump:
    def test_constructor_with_valid_config(self):
        config = {"max_flow_rate": 10, "minimum_temp_difference_between_water_incoming_and_outgoing_solar": 2,
                  "maximum_temp_difference_between_water_incoming_and_outgoing_solar": 15}
        wp = WaterPump(config)
        assert wp._max_flow_rate == 10
        assert wp._minimum_temp_difference_between_water_incoming_and_outgoing_solar == 2
        assert wp._maximum_temp_difference_between_water_incoming_and_outgoing_solar == 15

    def test_get_flow_rate(self):
        config = {"max_flow_rate": 10, "minimum_temp_difference_between_water_incoming_and_outgoing_solar": 2,
                  "maximum_temp_difference_between_water_incoming_and_outgoing_solar": 15}
        wp = WaterPump(config)
        assert wp.get_flow_rate() == wp._current_flow_rate

    def test_constructor_with_invalid_config(self):
        with pytest.raises(KeyError):
            config = {"max_flow_rate": 10, "minimum_temp_difference_between_water_incoming_and_outgoing_solar": 2}
            WaterPump(config)

    def test_adjust_flow_to_current_state_with_min_temp_difference(self):
        config = {"max_flow_rate": 10, "minimum_temp_difference_between_water_incoming_and_outgoing_solar": 2,
                  "maximum_temp_difference_between_water_incoming_and_outgoing_solar": 15}
        wp = WaterPump(config)
        wp.adjust_flow_to_current_state(20, 22)
        assert wp.get_flow_rate() == wp._min_flow_rate

    def test_adjust_flow_to_current_state_general_behavior(self):
        config = {"max_flow_rate": 10, "minimum_temp_difference_between_water_incoming_and_outgoing_solar": 2,
                  "maximum_temp_difference_between_water_incoming_and_outgoing_solar": 5}
        wp = WaterPump(config)
        wp.adjust_flow_to_current_state(20, 22)
        assert wp.get_flow_rate() == wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 25)
        assert wp.get_flow_rate() == wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 30)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 35)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 40)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 45)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 50)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 55)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 60)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 65)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 70)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 75)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 80)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 85)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 90)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 95)
        assert wp.get_flow_rate() > wp._min_flow_rate
        wp.adjust_flow_to_current_state(20, 100)
        assert wp.get_flow_rate() > wp._min_flow_rate

    def test_adjust_flow_to_current_state_with_low_temp_difference(self):
        config = {"max_flow_rate": 10, "minimum_temp_difference_between_water_incoming_and_outgoing_solar": 2,
                  "maximum_temp_difference_between_water_incoming_and_outgoing_solar": 15}
        wp = WaterPump(config)
        initial_fr = wp.get_flow_rate()
        incoming_temp = outgoing_temp = 25
        for i in range(5):
            incoming_temp -= 1
            outgoing_temp -= (1 + i)
            wp.adjust_flow_to_current_state(incoming_temp, outgoing_temp)
            assert initial_fr >= wp.get_flow_rate()
            initial_fr = wp.get_flow_rate()

