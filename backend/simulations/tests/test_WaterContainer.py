# test_WaterContainer.py - Generated by CodiumAI

import pytest

"""
Code Analysis:
- The WaterContainer class is designed to simulate the behavior of a water container in a heating system.
- It has various fields that store information about the container's capacity, current water temperature, thermal energy, and efficiency of the heating system.
- The class has methods to set and get the current thermal energy, process energy outflow for a given hour of the day, and run an hour of usage.
- The set_current_thermal_energy method calculates the current thermal energy in the container based on its water capacity and average temperature.
- The get_loggable_metrics method returns a dictionary of various metrics related to the container's current state, such as the current average water temperature and energy consumed by the heater.
- The process_energy_outflow_for_hour_of_day method processes the energy outflow for a given hour of the day based on the consumption pattern defined in the configuration.
- The process_hot_water_leaving_water_container method calculates the amount of hot water lost based on the outgoing water temperature and the temperature of the external water source.
- The run_hour_of_usage method simulates an hour of usage by calculating the energy flowed over the container, updating the internal temperature based on energy from solar panels, and applying usage patterns and rules.
- The class also has methods to hash and compare instances of the class for use in dictionaries.
- Overall, the WaterContainer class provides a way to model the behavior of a water container in a heating system and simulate its interactions with external factors such as solar panels and usage patterns.
"""

"""
Test Plan:
- test_set_and_get_current_thermal_energy(): tests that the current thermal energy can be set and retrieved correctly. Tags: [happy path]
- test_process_energy_outflow_for_hour_of_day(): tests that the energy outflow for a given hour of the day is processed correctly. Tags: [happy path]
- test_water_coming_back_colder(): tests the edge case where water coming back to container is colder than when it left. Tags: [edge case]
- test_consumption_pattern_not_defined(): tests the edge case where consumption pattern is not defined for a given hour of the day. Tags: [edge case]
- test_hashing_and_equality_methods(): tests the hashing and equality methods for use in dictionaries. Tags: [general behavior]
- test_run_hour_of_usage(): tests that an hour of usage is run correctly, including updating internal temperature based on energy from solar panels, applying usage patterns and rules, and processing hot water leaving container. Tags: [happy path]
- test_constructor_with_incorrect_or_missing_config_params(): tests the constructor with incorrect or missing configuration parameters. Tags: [general behavior]
- test_outgoing_water_temp_lower_than_external_source(): tests the edge case where outgoing water temperature is lower than external water source temperature. Tags: [edge case]
- test_update_internal_temp_based_on_energy_from_solar_panels(): tests the general behavior of updating internal temperature based on energy from solar panels. Tags: [general behavior]
- test_apply_usage_patterns_and_rules(): tests the general behavior of applying usage patterns and rules. Tags: [general behavior]
- test_process_hot_water_leaving_container(): tests the general behavior of processing hot water leaving container. Tags: [general behavior]
"""

# noinspection PyUnresolvedReferences
from simulationObjects.WaterContainer import WaterContainer
# noinspection PyUnresolvedReferences
from simulationObjects.CONSTANTS import SPECIFIC_HEAT_CAPACITY_OF_WATER

import copy

COMPLETE_CONFIG = {"water_capacity": 200,
                   "percent_of_thermal_energy_absorbed_from_pipes": 0.85,
                   "percent_of_thermal_energy_lost_to_waste_per_hour": 0.02,
                   "temperature_of_external_water_source": 7,
                   "efficiency_of_traditional_boiler": 0.75,
                   "minimum_average_water_temperature": 50,
                   "consumption_pattern": {
                       "00:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "01:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "02:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "03:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "04:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "05:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "06:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 0
                       },
                       "07:00": {
                           "water_used": 55,
                           "average_temperature_of_water_used": 38
                       },
                       "08:00": {
                           "water_used": 10,
                           "average_temperature_of_water_used": 50
                       },
                       "09:00": {
                           "water_used": 10,
                           "average_temperature_of_water_used": 50
                       },
                       "10:00": {
                           "water_used": 20,
                           "average_temperature_of_water_used": 30
                       },
                       "11:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 50
                       },
                       "12:00": {
                           "water_used": 60,
                           "average_temperature_of_water_used": 15
                       },
                       "13:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 50
                       },
                       "14:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 50
                       },
                       "15:00": {
                           "water_used": 5,
                           "average_temperature_of_water_used": 50
                       },
                       "16:00": {
                           "water_used": 10,
                           "average_temperature_of_water_used": 50
                       },
                       "18:00": {
                           "water_used": 10,
                           "average_temperature_of_water_used": 50
                       },
                       "19:00": {
                           "water_used": 35,
                           "average_temperature_of_water_used": 65
                       },
                       "20:00": {
                           "water_used": 10,
                           "average_temperature_of_water_used": 50
                       },
                       "21:00": {
                           "water_used": 10,
                           "average_temperature_of_water_used": 50
                       },
                       "22:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 50
                       },
                       "23:00": {
                           "water_used": 0,
                           "average_temperature_of_water_used": 50
                       }

                   }}


class TestWaterContainer:
    def test_set_and_get_current_thermal_energy(self):
        config = copy.deepcopy(COMPLETE_CONFIG)
        config["water_capacity"] = 50
        container = WaterContainer(config)
        container.set_current_thermal_energy()
        assert container._current_thermal_energy == 50 * 50 * SPECIFIC_HEAT_CAPACITY_OF_WATER
        assert container.get_loggable_metrics()[
                   "current_thermal_energy_in_water_container"] == 50 * 50 * SPECIFIC_HEAT_CAPACITY_OF_WATER

    def test_process_energy_outflow_for_hour_of_day(self):
        config = copy.deepcopy(COMPLETE_CONFIG)
        config["water_capacity"] = 50
        config["consumption_pattern"] = {
            "01:00": {'water_used': 10, "average_temperature_of_water_used": 60}}
        container = WaterContainer(config)
        container.process_energy_outflow_for_hour_of_day("01:00")
        assert container._volume_of_water_sent_out_of_water_container == 10
        assert container._average_temp_of_water_sent_out_of_water_container == 60
        assert container._energy_sent_out_of_water_container == 10 * 60 * SPECIFIC_HEAT_CAPACITY_OF_WATER

    def test_water_coming_back_colder(self):
        config = copy.deepcopy(COMPLETE_CONFIG)
        config["water_capacity"] = 50
        container = WaterContainer(config)
        with pytest.raises(EnvironmentError):
            container.run_hour_of_usage(40, 5, "01:00")

    def test_hashing_and_equality_methods(self):
        config = copy.deepcopy(COMPLETE_CONFIG)
        config["water_capacity"] = 50
        container1 = WaterContainer(config)
        container2 = WaterContainer(config)
        assert hash(container1) == hash(container2)
        assert container1 == container2

    def test_run_hour_of_usage(self):
        config = copy.deepcopy(COMPLETE_CONFIG)
        config["water_capacity"] = 50
        config["consumption_pattern"] = {
            "01:00": {"water_used": 10, "average_temperature_of_water_used": 60}}
        container = WaterContainer(config)
        container.run_hour_of_usage(52, 8, "01:00")
        assert container.outgoing_water_temperature == pytest.approx(65, rel=1e-2)
